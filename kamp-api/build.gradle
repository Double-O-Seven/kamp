apply plugin: 'maven'

configurations {
    apiCodegen
}

dependencies {

    compile(
            project(':kamp-codegen'),
            "com.google.inject:guice:$guiceVersion",
            "com.netflix.governator:governator-api:$governatorVersion"
    )

    apiCodegen project(':kamp-codegen')
}

def generatedSrcDir = "${buildDir}/generated-src/main/java"

sourceSets {
    main {
        java {
            srcDir generatedSrcDir
        }
    }
}

def apiPackageName = "ch.leadrian.samp.kamp.api"

def idlFilesDir = "${project(':kamp-plugin').projectDir}/src/main/cpp/sampgdk/lib/sampgdk"

def actorIDLFile = "${idlFilesDir}/a_actor.idl"
def objectsIDLFile = "${idlFilesDir}/a_objects.idl"
def playersIDLFile = "${idlFilesDir}/a_players.idl"
def sampIDLFile = "${idlFilesDir}/a_samp.idl"
def vehiclesIDLFile = "${idlFilesDir}/a_vehicles.idl"

def constantsPackageName = "${apiPackageName}.constants"

def generatedSAMPConstantsJavaFile = "${generatedSrcDir}/ch/leadrian/samp/kamp/runtime/SAMPConstants.java"

task generateSAMPConstantsClass(type: JavaExec) {
    dependsOn ':kamp-codegen:classes'
    main "ch.leadrian.samp.kamp.codegen.SAMPConstantsJavaCodeGenerator"
    classpath configurations.apiCodegen
    args = [
            "-o", generatedSrcDir,
            "-p", constantsPackageName,
            "-i", actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file generatedSAMPConstantsJavaFile
}

clean {
    delete += generatedSAMPConstantsJavaFile
}

compileKotlin.dependsOn generateSAMPConstantsClass
compileJava.dependsOn generateSAMPConstantsClass