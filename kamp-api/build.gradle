apply plugin: 'maven'

configurations {
    apiCodegen
}

dependencies {

    compileOnly(
            'com.google.inject:guice:4.2.0'
    )

    apiCodegen project(':kamp-api-codegen')
}

def generatedSrcDir = "${buildDir}/generated-src/main/java"

sourceSets {
    main {
        java {
            srcDir generatedSrcDir
        }
    }
}

def apiPackageName = "ch.leadrian.samp.kamp.api"

def idlFilesDir = "${project(':kamp-plugin').projectDir}/src/main/cpp/sampgdk/lib/sampgdk"

def actorIDLFile = "${idlFilesDir}/a_actor.idl"
def httpIDLFile = "${idlFilesDir}/a_http.idl"
def objectsIDLFile = "${idlFilesDir}/a_objects.idl"
def playersIDLFile = "${idlFilesDir}/a_players.idl"
def sampIDLFile = "${idlFilesDir}/a_samp.idl"
def vehiclesIDLFile = "${idlFilesDir}/a_vehicles.idl"

def generatedSAMPConstantsJavaFile = "${generatedSrcDir}/ch/leadrian/samp/kamp/api/SAMPConstants.java"

task generateSAMPConstantsClass(type: JavaExec) {
    dependsOn ':kamp-api-codegen:classes'
    main "ch.leadrian.samp.kamp.apicodegen.SAMPConstantsJavaCodeGenerator"
    classpath configurations.apiCodegen
    args = [
            "-o", generatedSrcDir,
            "-p", apiPackageName,
            "-i", actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file generatedSAMPConstantsJavaFile
}

def generatedSAMPCallbacksJavaFile = "${generatedSrcDir}/ch/leadrian/samp/kamp/api/SAMPCallbacks.java"

task generateSAMPCallbacksClass(type: JavaExec) {
    dependsOn ':kamp-api-codegen:classes'
    main "ch.leadrian.samp.kamp.apicodegen.SAMPCallbacksJavaCodeGenerator"
    classpath configurations.apiCodegen
    args = [
            "-o", generatedSrcDir,
            "-p", apiPackageName,
            "-i", actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file generatedSAMPCallbacksJavaFile
}

def generatedSAMPNativeFunctionsJavaFile = "${generatedSrcDir}/ch/leadrian/samp/kamp/api/SAMPNativeFunctions.java"

task generateSAMPNativeFunctionsClass(type: JavaExec) {
    dependsOn ':kamp-api-codegen:classes'
    main "ch.leadrian.samp.kamp.apicodegen.SAMPNativeFunctionsJavaCodeGenerator"
    classpath configurations.apiCodegen
    args = [
            "-o", generatedSrcDir,
            "-p", apiPackageName,
            "-i", actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file generatedSAMPNativeFunctionsJavaFile
}

compileKotlin.dependsOn(generateSAMPConstantsClass, generateSAMPCallbacksClass, generateSAMPNativeFunctionsClass)
compileJava.dependsOn(generateSAMPConstantsClass, generateSAMPCallbacksClass, generateSAMPNativeFunctionsClass)
