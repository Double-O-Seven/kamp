package ch.leadrian.samp.kamp.codegen.cpp

import ch.leadrian.samp.kamp.cidl.model.Function
import ch.leadrian.samp.kamp.codegen.SingleFileCodeGenerator
import ch.leadrian.samp.kamp.codegen.camelCaseName
import ch.leadrian.samp.kamp.codegen.isCallback
import java.io.File
import java.io.Writer

internal class SAMPCallbacksMethodCacheHppGenerator(
        private val functions: List<Function>,
        outputDirectory: File
) : SingleFileCodeGenerator(outputDirectory) {

    override val fileName: String = "SAMPCallbacksMethodCache.hpp"

    override fun generate(writer: Writer) {
        with(writer) {
            writeHeader()
            writeMethodIDGetters(functions)
            writeMethodIDFields(functions)
            writeFooter()
        }
    }

    private fun Writer.writeHeader() {
        write(
                """
            |
            |/* Do not edit this file, it is generated */
            |
            |#ifndef SAMP_CALLBACKS_METHOD_CACHE_HPP
            |#define SAMP_CALLBACKS_METHOD_CACHE_HPP
            |
            |#include <jni.h>
            |
            |class SAMPCallbacksMethodCache {
            |
            |public:
            |
            |    int Initialize(JNIEnv *jniEnv, jclass clazz);
            |
            |    jmethodID GetOnProcessTickMethodID() {
            |        return onProcessTickMethodID;
            |    }
            |
            |
        """.trimMargin("|")
        )
    }

    private fun Writer.writeMethodIDGetters(functions: List<Function>) {
        functions.filter { it.isCallback }.forEach { writeMethodIDGetter(it) }
    }

    private fun Writer.writeMethodIDGetter(function: Function) {
        write(
                """
            |    jmethodID Get${function.name}MethodID() {
            |        return ${function.camelCaseName}MethodID;
            |    }
            |
            |
        """.trimMargin()
        )
    }

    private fun Writer.writeMethodIDFields(functions: List<Function>) {
        write(
                """
            |private:
            |
            |    jmethodID onProcessTickMethodID;
            |
        """.trimMargin()
        )
        functions.filter { it.isCallback }.forEach { writeMethodIDField(it) }
    }

    private fun Writer.writeMethodIDField(function: Function) {
        write("    jmethodID ${function.camelCaseName}MethodID;\n\n")
    }

    private fun Writer.writeFooter() {
        write("};\n\n#endif\n")
    }

}