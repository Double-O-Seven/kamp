import org.gradle.internal.jvm.Jvm

configurations {
    runtimeCodegen
}

apply plugin: 'kamp-cpp-codegen'

dependencies {
    runtimeCodegen project(':kamp-core')
}

def runtimePackageName = "ch.leadrian.samp.kamp.core.runtime"

def sampgdkDir = "$projectDir/src/main/cpp/sampgdk"

def idlFilesDir = "$sampgdkDir/lib/sampgdk"

def actorIDLFile = "$idlFilesDir/a_actor.idl"
def objectsIDLFile = "$idlFilesDir/a_objects.idl"
def playersIDLFile = "$idlFilesDir/a_players.idl"
def sampIDLFile = "$idlFilesDir/a_samp.idl"
def vehiclesIDLFile = "$idlFilesDir/a_vehicles.idl"

def kampSrcDir = "$sampgdkDir/plugins/kamp"

def sampgdkBuildDir = "$buildDir/sampgdk"

def sampPluginSdkDir = "$projectDir/src/main/cpp/samp-plugin-sdk-original"

kampCppCodegen {
    runtimeJavaPackageName = runtimePackageName
    outputDirectoryPath = kampSrcDir
    interfaceDefinitionFiles actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
}

task generateSAMPNativeFunctionsHeaderFile {
    def kampCoreMainOutput = project.project(':kamp-core').sourceSets.main.output
    def sampNativeFunctionsHeaderFile = "$kampSrcDir/SAMPNativeFunctions.h"
    dependsOn ':kamp-core:classes'
    inputs.dir kampCoreMainOutput
    outputs.file sampNativeFunctionsHeaderFile
    doLast {
        file(sampNativeFunctionsHeaderFile).parentFile.mkdirs()
        exec {
            executable Jvm.current().getExecutable('javah')
            args = [
                    "-o", sampNativeFunctionsHeaderFile,
                    "-classpath", kampCoreMainOutput.asPath,
                    "-jni",
                    "-verbose",
                    "${runtimePackageName}.SAMPNativeFunctions"
            ]
        }
    }
}

task makePlugin {
    dependsOn(
            generateSAMPNativeFunctionsHeaderFile,
            generateKampCppFiles
    )

    doFirst {
        mkdir sampgdkBuildDir
    }

    doLast {
        exec {
            workingDir = sampgdkBuildDir
            def command = "cmake \"$sampgdkDir\" -DSAMP_SDK_ROOT=\"$sampPluginSdkDir\" -DSAMPGDK_STATIC=ON -DSAMPGDK_BUILD_PLUGINS=ON"
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine 'cmd', '/c', command
            } else {
                commandLine command
            }
        }

        exec {
            workingDir = sampgdkBuildDir
            def command = 'cmake --build . --config Release'
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine 'cmd', '/c', command
            } else {
                commandLine command
            }
        }
    }

    inputs.dir sampgdkDir
    inputs.dir sampPluginSdkDir
    outputs.dir sampgdkBuildDir
}

clean.dependsOn cleanGenerateKampCppFiles
clean.dependsOn cleanMakePlugin
clean.dependsOn cleanGenerateSAMPNativeFunctionsHeaderFile

build.dependsOn makePlugin
