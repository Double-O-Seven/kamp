import org.gradle.internal.jvm.Jvm

configurations {
    runtimeCodegen
}

dependencies {
    runtimeCodegen(
            project(':kamp-codegen'),
            project(':kamp-runtime')
    )
}

def runtimePackageName = "ch.leadrian.samp.kamp.runtime"

def sampgdkDir = "${projectDir}/src/main/cpp/sampgdk"

def idlFilesDir = "${sampgdkDir}/lib/sampgdk"

def actorIDLFile = "${idlFilesDir}/a_actor.idl"
def objectsIDLFile = "${idlFilesDir}/a_objects.idl"
def playersIDLFile = "${idlFilesDir}/a_players.idl"
def sampIDLFile = "${idlFilesDir}/a_samp.idl"
def vehiclesIDLFile = "${idlFilesDir}/a_vehicles.idl"

def kampSrcDir = "${sampgdkDir}/plugins/kamp"

def sampPluginSdkDir = "${projectDir}/src/main/cpp/samp-plugin-sdk-original"

def sampgdkBuildDir = "${sampgdkDir}/build"

def sampNativeFunctionsHeaderFile = "${kampSrcDir}/SAMPNativeFunctions.h"

def kampRuntimeMainOutput = project(':kamp-runtime').sourceSets.main.output

task generateSAMPNativeFunctionsHeaderFile {
    dependsOn ':kamp-runtime:classes'
    inputs.dir kampRuntimeMainOutput
    outputs.file sampNativeFunctionsHeaderFile
    doLast {
        file(sampNativeFunctionsHeaderFile).parentFile.mkdirs()
        exec {
            executable Jvm.current().getExecutable('javah')
            args = [
                    "-o", sampNativeFunctionsHeaderFile,
                    "-classpath", project(':kamp-runtime').sourceSets.main.output.asPath,
                    "-jni",
                    "-verbose",
                    "${runtimePackageName}.SAMPNativeFunctions"
            ]
        }
    }
}

def sampNativeFunctionsCppFile = "${kampSrcDir}/SAMPNativeFunctions.cpp"

task generateSAMPNativeFunctionsCppFile(type: JavaExec) {
    dependsOn ':kamp-codegen:classes'
    main "ch.leadrian.samp.kamp.codegen.SAMPNativeFunctionsCppCodeGenerator"
    classpath configurations.runtimeCodegen
    args = [
            "-o", kampSrcDir,
            "-p", runtimePackageName,
            "-i", actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file sampNativeFunctionsCppFile
}

def sampCallbacksDefFile = "${kampSrcDir}/SAMPCallbacks.def"

task generateSAMPCallbacksDefFile(type: JavaExec) {
    dependsOn ':kamp-codegen:classes'
    main "ch.leadrian.samp.kamp.codegen.SAMPCallbacksDefCodeGenerator"
    classpath configurations.runtimeCodegen
    args = [
            "-o", kampSrcDir,
            "-i", actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file sampCallbacksDefFile
}

def sampCallbacksCppFile = "${kampSrcDir}/SAMPCallbacks.cpp"

task generateSAMPCallbacksCppFile(type: JavaExec) {
    dependsOn ':kamp-codegen:build'
    main "ch.leadrian.samp.kamp.codegen.SAMPCallbacksCppCodeGenerator"
    classpath configurations.runtimeCodegen
    args = [
            "-o", kampSrcDir,
            "-i", actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file sampCallbacksCppFile
}

def sampCallbacksMethodCacheHppFile = "${kampSrcDir}/SAMPCallbacksMethodCache.hpp"

task generateSAMPCallbacksMethodCacheHppFile(type: JavaExec) {
    dependsOn ':kamp-codegen:classes'
    main "ch.leadrian.samp.kamp.codegen.SAMPCallbacksMethodCacheHeaderCodeGenerator"
    classpath configurations.runtimeCodegen
    args = [
            "-o", kampSrcDir,
            "-i", actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file sampCallbacksMethodCacheHppFile
}

def sampCallbacksMethodCacheCppFile = "${kampSrcDir}/SAMPCallbacksMethodCache.cpp"

task generateSAMPCallbacksMethodCacheCppFile(type: JavaExec) {
    dependsOn ':kamp-codegen:classes'
    main "ch.leadrian.samp.kamp.codegen.SAMPCallbacksMethodCacheCppCodeGenerator"
    classpath configurations.runtimeCodegen
    args = [
            "-o", kampSrcDir,
            "-i", actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file sampCallbacksMethodCacheCppFile
}

task makePlugin {
    dependsOn(
            generateSAMPNativeFunctionsHeaderFile,
            generateSAMPNativeFunctionsCppFile,
            generateSAMPCallbacksDefFile,
            generateSAMPCallbacksMethodCacheHppFile,
            generateSAMPCallbacksMethodCacheCppFile,
            generateSAMPCallbacksCppFile
    )

    doFirst {
        mkdir sampgdkBuildDir
    }

    doLast {
        exec {
            workingDir sampgdkBuildDir
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine 'cmd', '/c', "cmake .. -DSAMP_SDK_ROOT=${sampPluginSdkDir} -DSAMPGDK_STATIC=ON -DSAMPGDK_BUILD_PLUGINS=ON"
            } else {
                commandLine "cmake .. -DSAMP_SDK_ROOT=${sampgdkBuildDir}"
            }
        }

        exec {
            workingDir sampgdkBuildDir
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine 'cmd', '/c', 'cmake --build . --config Release'
            } else {
                commandLine 'cmake --build . --config Release'
            }
        }
    }

    inputs.dir kampSrcDir
    outputs.dir sampgdkBuildDir
}

clean {
    delete += sampgdkBuildDir
    delete += sampNativeFunctionsHeaderFile
    delete += sampNativeFunctionsCppFile
    delete += sampCallbacksDefFile
    delete += sampCallbacksMethodCacheHppFile
    delete += sampCallbacksMethodCacheCppFile
    delete += sampCallbacksCppFile
}

build.dependsOn makePlugin
