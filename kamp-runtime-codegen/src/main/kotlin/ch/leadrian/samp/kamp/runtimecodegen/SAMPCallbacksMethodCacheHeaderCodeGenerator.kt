package ch.leadrian.samp.kamp.runtimecodegen

import ch.leadrian.samp.cidl.model.Function
import ch.leadrian.samp.cidl.parser.InterfaceDefinitionParser
import java.io.BufferedWriter
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardOpenOption

class SAMPCallbacksMethodCacheHeaderCodeGenerator {

    fun generate(outputDirectory: Path, functions: List<Function>, fileName: String = "SAMPCallbacksMethodCache") {
        Files.createDirectories(outputDirectory)
        val outputFile = outputDirectory.resolve("$fileName.hpp")

        Files.newBufferedWriter(outputFile, StandardOpenOption.CREATE, StandardOpenOption.WRITE).use { writer ->
            writeHeader(writer)
            writeMethodIDGetters(functions, writer)
            writeMethodIDFields(functions, writer)
            writeFooter(writer)
        }
    }

    private fun writeHeader(writer: BufferedWriter) {
        writer.write("""
            |
            |/* Do not edit this file, it is generated */
            |
            |#ifndef SAMP_CALLBACKS_METHOD_CACHE_HPP
            |#define SAMP_CALLBACKS_METHOD_CACHE_HPP
            |
            |#include <jni.h>
            |
            |class SAMPCallbacksMethodCache {
            |
            |public:
            |    int Initialize(JNIEnv *jniEnv, jclass clazz);
            |
            |""".trimMargin("|"))
    }

    private fun writeMethodIDGetters(functions: List<Function>, writer: BufferedWriter) {
        functions
                .filter { it.hasAttribute("callback") }
                .forEach { writeMethodIDGetter(it, writer) }
    }

    private fun writeMethodIDGetter(function: Function, writer: BufferedWriter) {
        val camelCaseName = "${function.name[0].toLowerCase()}${function.name.substring(1)}"
        writer.write("""
            |    jmethodID Get${function.name}MethodID() {
            |        return $camelCaseName;
            |    }
            |
            |
        """.trimMargin())
    }

    private fun writeMethodIDFields(functions: List<Function>, writer: BufferedWriter) {
        writer.write("private:\n")
        functions
                .filter { it.hasAttribute("callback") }
                .forEach { writeMethodIDField(it, writer) }
    }

    private fun writeMethodIDField(function: Function, writer: BufferedWriter) {
        val camelCaseName = "${function.name[0].toLowerCase()}${function.name.substring(1)}"
        writer.write("    jmethodID ${camelCaseName}MethodID;\n\n")
    }

    private fun writeFooter(writer: BufferedWriter) {
        writer.write("};\n\n#endif\n")
        writer.close()
    }

    companion object {

        @JvmStatic
        fun main(args: Array<String>) {
            val codeGeneratorArguments = CodeGeneratorArguments.parse(args = args, packageNameRequired = false)
            val interfaceDefinitionParser = InterfaceDefinitionParser()
            val functions = interfaceDefinitionParser.parse(*codeGeneratorArguments.interfaceDefinitionSources).functions
            SAMPCallbacksMethodCacheHeaderCodeGenerator().generate(
                    outputDirectory = codeGeneratorArguments.outputDirectoryPath,
                    functions = functions
            )
        }
    }

}