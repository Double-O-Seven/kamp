configurations {
    apiCodegen
}

dependencies {
    apiCodegen project(':api-codegen')
}

def apiPackageName = "ch.leadrian.samp.kamp.api"

def sampgdkDir = "${projectDir}/src/main/cpp/sampgdk"

def idlFilesDir = "${sampgdkDir}/lib/sampgdk"

def actorIDLFile = "${idlFilesDir}/a_actor.idl"
def httpIDLFile = "${idlFilesDir}/a_http.idl"
def objectsIDLFile = "${idlFilesDir}/a_objects.idl"
def playersIDLFile = "${idlFilesDir}/a_players.idl"
def sampIDLFile = "${idlFilesDir}/a_samp.idl"
def vehiclesIDLFile = "${idlFilesDir}/a_vehicles.idl"

def kampSrcDir = "${sampgdkDir}/plugins/kamp"

def generatedSAMPNativeFunctionsHeaderFile = "${kampSrcDir}/SAMPNativeFunctions.h"

def sampPluginSdkDir = "${projectDir}/src/main/cpp/samp-plugin-sdk-original"

def sampgdkBuildDir = "${sampgdkDir}/build"

task generateSAMPNativeFunctionsHeaderFile(type: JavaExec) {
    dependsOn ':api-codegen:classes'
    main "ch.leadrian.samp.kamp.apicodegen.SAMPNativeFunctionsHeaderCodeGenerator"
    classpath configurations.apiCodegen
    args = [
            "-o", kampSrcDir,
            "-p", apiPackageName,
            "-i", actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile
    ]
    inputs.files(actorIDLFile, httpIDLFile, objectsIDLFile, playersIDLFile, sampIDLFile, vehiclesIDLFile)
    outputs.file generatedSAMPNativeFunctionsHeaderFile
}

task makePlugin {
    dependsOn(generateSAMPNativeFunctionsHeaderFile)

    doFirst {
        mkdir sampgdkBuildDir
    }

    doLast {
        exec {
            workingDir sampgdkBuildDir
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine 'cmd', '/c', "cmake .. -DSAMP_SDK_ROOT=${sampPluginSdkDir} -DSAMPGDK_STATIC=ON -DSAMPGDK_BUILD_PLUGINS=ON"
            } else {
                commandLine "cmake .. -DSAMP_SDK_ROOT=${sampgdkBuildDir}"
            }
        }

        exec {
            workingDir sampgdkBuildDir
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                commandLine 'cmd', '/c', 'cmake --build . --config Release'
            } else {
                commandLine 'cmake --build . --config Release'
            }
        }
    }

    inputs.dir kampSrcDir
    outputs.dir sampgdkBuildDir
}

clean {
    delete += sampgdkBuildDir
    delete += generatedSAMPNativeFunctionsHeaderFile
}

build.dependsOn makePlugin
